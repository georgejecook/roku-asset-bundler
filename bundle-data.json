{"index.ts":"LyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqLwovKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzICovCmltcG9ydCAqIGFzIGZzRXh0cmEgZnJvbSAnZnMtZXh0cmEnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnOwppbXBvcnQgKiBhcyBnbG9iIGZyb20gJ2dsb2InOwppbXBvcnQgKiBhcyBtaW5pbWF0Y2ggZnJvbSAnbWluaW1hdGNoJzsKCmludGVyZmFjZSBCdW5kbGVDb25maWcgewogICAgZXhjbHVkZT86IHN0cmluZ1tdOwogICAgb3V0Pzogc3RyaW5nOwogICAgaWQ/OiBzdHJpbmc7CiAgICByb290Pzogc3RyaW5nOwp9Cgpjb25zdCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJyk7CmNvbnN0IGFyZ3YgPSB5YXJncwogICAgLmNvbW1hbmQoJ2J1bmRsZScsICdidW5kbGVzIGZpbGVzIG1hdGNoaW5nIGdsb2IgcGF0aCBwYXR0ZXJuJywgewogICAgICAgIGNvbmZpZzogewogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ2pzb24gY29uZmlnIGZpbGUgY29udGFpbmluZyBzZXR0aW5ncycsCiAgICAgICAgICAgIGFsaWFzOiAnYycsCiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnCiAgICAgICAgfSwKICAgICAgICBwYXRoOiB7CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAncm9vdCBwYXRoIG9mIGFzc2V0IGJ1bmRsZSBmaWxlcycsCiAgICAgICAgICAgIGFsaWFzOiAncCcsCiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnCiAgICAgICAgfSwKICAgICAgICBvdXQ6IHsKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdvdXRwdXQgcGF0aCcsCiAgICAgICAgICAgIGFsaWFzOiAnbycsCiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnCiAgICAgICAgfSwKICAgICAgICBpZDogewogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ2lkIG9mIHRoZSBhc3NldCBidW5kbGUnLAogICAgICAgICAgICBhbGlhczogJ2knLAogICAgICAgICAgICB0eXBlOiAnc3RyaW5nJwogICAgICAgIH0sCiAgICAgICAgcm9vdDogewogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ3Jvb3RQYXRoJywKICAgICAgICAgICAgYWxpYXM6ICdyJywKICAgICAgICAgICAgdHlwZTogJ3N0cmluZycKICAgICAgICB9CiAgICB9KS5hcmd2OwppZiAoYXJndi5fLmluY2x1ZGVzKCdidW5kbGUnKSkgewogICAgbGV0IGNvbmZpZyA9IGxvYWRDb25maWcoYXJndik7CiAgICBjb25zb2xlLmxvZygnQnVuZGxpbmcgZmlsZXMgaW4gcGF0aCcsIGNvbmZpZy5yb290KTsKICAgIGxldCBtYW5pZmVzdEZpbGVuYW1lID0gcGF0aC5qb2luKGNvbmZpZy5vdXQsIGAke2NvbmZpZy5pZH0uanNvbmApOwogICAgbGV0IGRhdGFGaWxlbmFtZSA9IHBhdGguam9pbihjb25maWcub3V0LCBgJHtjb25maWcuaWR9LWRhdGEuanNvbmApOwogICAgbGV0IG1hbmlmZXN0ID0gbG9hZE1hbmlmZXN0KGNvbmZpZy5pZCwgbWFuaWZlc3RGaWxlbmFtZSk7CiAgICBsZXQgZmlsZURhdGEgPSB7fTsKCiAgICBsZXQgcm9vdEdsb2IgPSBwYXRoLmpvaW4oY29uZmlnLnJvb3QsICcqKi8qLionKTsKICAgIGxldCByID0gcGF0aC5qb2luKGNvbmZpZy5yb290LCAnJyk7CiAgICBsZXQgcm9vdExlbiA9IHIgPyByLmxlbmd0aCArIDEgOiAwOwogICAgZ2xvYihyb290R2xvYiwgKGVyLCBmaWxlcykgPT4gewogICAgICAgIGZvciAobGV0IGYgb2YgZmlsZXMpIHsKICAgICAgICAgICAgaWYgKHNob3VsZEluY2x1ZGVGaWxlKGYsIGNvbmZpZy5leGNsdWRlKSkgewogICAgICAgICAgICAgICAgbGV0IHN0YXRzID0gZnNFeHRyYS5zdGF0U3luYyhmKTsKICAgICAgICAgICAgICAgIGxldCBrZXkgPSBmLnJlcGxhY2UoKC9cLy9naW0pLCAnXycpLnN1YnN0cmluZyhyb290TGVuKTsKICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGYsICcgPiAnLCBrZXkpOwogICAgICAgICAgICAgICAgbWFuaWZlc3QuZmlsZXNba2V5XSA9IE1hdGgucm91bmQoc3RhdHMubXRpbWUuZ2V0VGltZSgpIC8gMTAwMCk7CgogICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBmc0V4dHJhLnJlYWRGaWxlU3luYyhmLCB7IGVuY29kaW5nOiAnYmFzZTY0JyB9KTsKICAgICAgICAgICAgICAgIGZpbGVEYXRhW2tleV0gPSBkYXRhOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3NraXBwaW5nIGZpbGU6JywgZik7CiAgICAgICAgICAgIH0KCiAgICAgICAgfQogICAgICAgIGNvbnNvbGUubG9nKCd3cml0aW5nIG1hbmlmZXN0IHRvIGZpbGUnLCBtYW5pZmVzdEZpbGVuYW1lKTsKICAgICAgICBmc0V4dHJhLndyaXRlRmlsZVN5bmMobWFuaWZlc3RGaWxlbmFtZSwgSlNPTi5zdHJpbmdpZnkobWFuaWZlc3QpLCAndXRmOCcpOwogICAgICAgIGNvbnNvbGUubG9nKCd3cml0aW5nIGRhdGEgdG8gZmlsZScsIGRhdGFGaWxlbmFtZSk7CiAgICAgICAgZnNFeHRyYS53cml0ZUZpbGVTeW5jKGRhdGFGaWxlbmFtZSwgSlNPTi5zdHJpbmdpZnkoZmlsZURhdGEpLCAndXRmOCcpOwogICAgfSk7Cn0KCmZ1bmN0aW9uIGxvYWRNYW5pZmVzdChpZCwgZmlsZW5hbWUpIHsKICAgIGxldCBtYW5pZmVzdCA9IHsKICAgICAgICBpZDogaWQsCiAgICAgICAgdmVyc2lvbjogMCwKICAgICAgICBmaWxlczoge30KICAgIH07CiAgICB0cnkgewogICAgICAgIGxldCBmaWxlRGF0YVRleHQgPSBmc0V4dHJhLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pOwogICAgICAgIG1hbmlmZXN0ID0gSlNPTi5wYXJzZShmaWxlRGF0YVRleHQpOwogICAgICAgIG1hbmlmZXN0LnZlcnNpb24rKzsKICAgICAgICBtYW5pZmVzdC5maWxlcyA9IHt9OwoKICAgIH0gY2F0Y2ggKGVycm9yKSB7CgogICAgfQogICAgcmV0dXJuIG1hbmlmZXN0Owp9CgpmdW5jdGlvbiBsb2FkQ29uZmlnKGFyZ3YpOiBCdW5kbGVDb25maWcgewogICAgbGV0IGNvbmZpZyA9IHt9IGFzIEJ1bmRsZUNvbmZpZzsKICAgIGlmIChhcmd2LmNvbmZpZykgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxldCBjb25maWdUZXh0ID0gZnNFeHRyYS5yZWFkRmlsZVN5bmMoYXJndi5jb25maWcsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTsKICAgICAgICAgICAgY29uZmlnID0gSlNPTi5wYXJzZShjb25maWdUZXh0KTsKICAgICAgICAgICAgY29uZmlnLmV4Y2x1ZGUgPSBjb25maWcuZXhjbHVkZSB8fCBbCiAgICAgICAgICAgICAgICAnKiovLmdpdCcsICcqKi8qOlpvbmUuaWRlbnRpZmllcicKICAgICAgICAgICAgXTsKICAgICAgICAgICAgY29uZmlnLm91dCA9IGNvbmZpZy5vdXQgfHwgJy4vJzsKICAgICAgICAgICAgY29uZmlnLmlkID0gY29uZmlnLmlkIHx8ICdidW5kbGUnOwogICAgICAgICAgICBjb25maWcucm9vdCA9IGNvbmZpZy5yb290IHx8ICcnOwoKICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdjb3VsZCBub3QgbG9hZCBzcGVjaWZpZWQgY29uZmlnIGZpbGUnLCBhcmd2LmNvbmZpZyk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBjb25maWcuZXhjbHVkZSA9IGFyZ3YuZXhjbHVkZSB8fCBbCiAgICAgICAgICAgICcqKi8uZ2l0JywgJyoqLyo6Wm9uZS5pZGVudGlmaWVyJwogICAgICAgIF07CiAgICAgICAgY29uZmlnLm91dCA9IGFyZ3Yub3V0IHx8ICcuLyc7CiAgICAgICAgY29uZmlnLmlkID0gYXJndi5pZCB8fCAnYnVuZGxlJzsKICAgICAgICBjb25maWcucm9vdCA9IGFyZ3Yucm9vdCB8fCAnJzsKICAgIH0KCiAgICByZXR1cm4gY29uZmlnOwp9CgpmdW5jdGlvbiBzaG91bGRJbmNsdWRlRmlsZShmaWxlbmFtZSwgcGF0dGVybnMpIHsKICAgIGZvciAobGV0IGZpbHRlciBvZiBwYXR0ZXJucykgewogICAgICAgIGlmIChtaW5pbWF0Y2goZmlsZW5hbWUsIGZpbHRlcikpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0cnVlOwp9Cg=="}